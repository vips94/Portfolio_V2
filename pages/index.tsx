"use client";
import Head from "next/head";
import styles from "@/styles/Home.module.scss";
import NavBar from "@/components/page-nav-bar";
import HomePage from "@/components/page-homeV2";
import React, { useEffect, useRef } from "react";
import Blob from "@/components/blob";
import Skills from "@/components/page-skillsV2";
import Divider from "@/components/divider";
import Thread from "@/components/thread";
import Projects from "@/components/page-projects";
import Popup from "@/components/popup";
import { useSelector } from "react-redux";
import { selectIsProjectSelected } from "@/store/project";
import ContactUs from "@/components/page-contact-us/index";
import Footer from "@/components/footer";
import ThemeOverlay from "@/components/page-overlay";
import gsap from "gsap";
import {
  selectPropertiesBorderColor,
  selectPropertyTextStroke,
} from "@/store/skills";
import Experience from "@/components/page-experience";

export default function Home() {
  const isProjectSelected = useSelector(selectIsProjectSelected);
  const propertiesBorderColor = useSelector(selectPropertiesBorderColor);
  const propertyTextStroke = useSelector(selectPropertyTextStroke);
  const mouseRef = useRef(null) as any;

  useEffect(() => {
    (async () => {
      //to smooth the scrolling
      const LocomotiveScroll = (await import("locomotive-scroll")).default;
      const locomotiveScroll = new LocomotiveScroll();
    })();
  }, []);

  const mouseMoveHandle = (event:any) => {
    console.log(event.clientX, event.clientY);
    gsap.to(mouseRef.current,{
      x: event.pageX - mouseRef.current.offsetWidth/2,
      y: event.pageY - mouseRef.current.offsetHeight/2,
      duration: 0.1,
      ease: "none",
    })
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`${styles.main}`}
        id="main"
        onMouseMove={(e) => mouseMoveHandle(e)}
      >
        <div ref={mouseRef} className={styles.pointer} style={{backgroundColor:propertiesBorderColor, filter: `drop-shadow(0px 0px 5px ${propertiesBorderColor})`, width: '10px', height:'10px'}}/>
        <Thread
          style={{ zIndex: 3, right: "2%" }}
          color="#e8ccc7"
          threadWidth={1}
        />
        <Blob
          style={{
            transform: "translate(-35%,300%)",
            top: "0",
            left: "0",
            zIndex: "5",
          }}
          image="/images/home/home-fg4.jpg"
        />
        <ThemeOverlay />
        <NavBar />
        <HomePage />
        <Experience/>
        <Skills />
        <Projects />
        <ContactUs />
        <Footer />
        {isProjectSelected && <Popup />}
      </main>
    </>
  );
}
